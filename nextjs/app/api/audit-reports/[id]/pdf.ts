import { createClient } from '@/utils/supabase/server'
import { NextRequest, NextResponse } from 'next/server'
import { jsPDF } from 'jspdf'

export async function GET(
  request: NextRequest, 
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    return new Response('Unauthorized', { status: 401 })
  }
  // Only allow admin or report owner
  const { data: report, error } = await supabase
    .from('audit_reports')
    .select('*')
    .eq('id', id)
    .eq('deleted_at', null)
    .single()
  if (error || !report) {
    return new Response('Audit report not found', { status: 404 })
  }
  // Generate PDF
  const doc = new jsPDF()
  doc.setFontSize(18)
  doc.text(report.report_name || 'Audit Report', 10, 20)
  doc.setFontSize(12)
  doc.text('Status: ' + (report.status || 'N/A'), 10, 30)
  doc.text('Generated By: ' + (report.generated_by || 'N/A'), 10, 40)
  doc.text('Created At: ' + (report.created_at ? new Date(report.created_at).toLocaleString() : 'N/A'), 10, 50)
  doc.text('---', 10, 60)
  doc.text('Report Data:', 10, 70)
  doc.setFontSize(10)
  doc.text(JSON.stringify(report.report_data, null, 2), 10, 80)
  // Return PDF
  const pdfData = doc.output('arraybuffer')
  return new Response(pdfData, {
    status: 200,
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="audit_report_${id}.pdf"`
    }
  })
} 